"""N8N Webhook —Å–µ—Ä–≤–∏—Å –¥–ª—è –¥–≤—É—Å—Ç–æ—Ä–æ–Ω–Ω–µ–π —Å–≤—è–∑–∏ —Å —Å–æ–∑–¥–∞–Ω–∏–µ–º Google Sheets"""
import requests
import json
from datetime import datetime, timedelta
import asyncio
import logging

logger = logging.getLogger(__name__)

class N8NWebhookService:
    def __init__(self):
        # URL –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –≤ N8N
        self.n8n_outgoing_webhook = None
        
        # –•—Ä–∞–Ω–∏–ª–∏—â–µ –æ–∂–∏–¥–∞—é—â–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤ –æ—Ç N8N
        self.pending_requests = {}
        
    def set_outgoing_webhook(self, url):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ URL –¥–ª—è –∏—Å—Ö–æ–¥—è—â–µ–≥–æ webhook –≤ N8N"""
        self.n8n_outgoing_webhook = url
        logger.info(f'N8N outgoing webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {url}')
        
    async def send_data_to_n8n(self, user_id, user_data):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ N8N –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã"""
        if not self.n8n_outgoing_webhook:
            logger.error('N8N outgoing webhook –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω')
            return False
            
        try:
            # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ ID –∑–∞–ø—Ä–æ—Å–∞
            request_id = f"{user_id}_{int(datetime.now().timestamp())}"
            
            # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã
            current_date = datetime.now().strftime("%d.%m.%Y")
            sheet_title = f"[{current_date}] ‚Äì {user_data['profession']}"
            
            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è N8N
            n8n_payload = {
                "request_id": request_id,
                "user_id": user_id,
                "action": "create_google_sheet",
                "sheet_title": sheet_title,
                "user_data": {
                    "profession": user_data['profession'],
                    "segmentation": user_data['segmentation'],
                    "ideal_client": user_data['ideal_client'],
                    "analysis_date": current_date
                },
                "spreadsheet_data": self._prepare_spreadsheet_data(user_data, current_date)
            }
            
            logger.info(f'–û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ N8N –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}, request_id: {request_id}')
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –∫–∞–∫ –æ–∂–∏–¥–∞—é—â–∏–π
            self.pending_requests[request_id] = {
                'user_id': user_id,
                'timestamp': datetime.now(),
                'status': 'pending'
            }
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º POST –∑–∞–ø—Ä–æ—Å –≤ N8N
            response = requests.post(
                self.n8n_outgoing_webhook,
                json=n8n_payload,
                headers={'Content-Type': 'application/json'},
                timeout=30
            )
            
            if response.status_code == 200:
                logger.info(f'–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ N8N, request_id: {request_id}')
                return request_id
            else:
                logger.error(f'–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ N8N: {response.status_code} - {response.text}')
                # –£–¥–∞–ª—è–µ–º –∏–∑ –æ–∂–∏–¥–∞—é—â–∏—Ö –ø—Ä–∏ –æ—à–∏–±–∫–µ
                if request_id in self.pending_requests:
                    del self.pending_requests[request_id]
                return False
                
        except requests.exceptions.RequestException as e:
            logger.error(f'–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å N8N: {e}')
            return False
        except Exception as e:
            logger.error(f'–û–±—â–∞—è –æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ N8N: {e}')
            return False
    
    def _prepare_spreadsheet_data(self, user_data, current_date):
        """–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã"""
        return [
            ['üéØ –ê–ù–ê–õ–ò–ó –¶–ï–õ–ï–í–û–ô –ê–£–î–ò–¢–û–†–ò–ò', ''],
            ['', ''],
            ['–ü–∞—Ä–∞–º–µ—Ç—Ä', '–ó–Ω–∞—á–µ–Ω–∏–µ'],
            ['–ü—Ä–æ—Ñ–µ—Å—Å–∏—è —ç–∫—Å–ø–µ—Ä—Ç–∞', user_data['profession']],
            ['–°–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è —ç–∫—Å–ø–µ—Ä—Ç–∞', user_data['segmentation']],
            ['–ü–æ—Ä—Ç—Ä–µ—Ç –∏–¥–µ–∞–ª—å–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞', user_data['ideal_client']],
            ['–î–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞', current_date],
            ['', ''],
            ['üìã –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –î–õ–Ø –î–ê–õ–¨–ù–ï–ô–®–ï–ô –†–ê–ë–û–¢–´', ''],
            ['', ''],
            ['–û—Å–Ω–æ–≤–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –¶–ê', '–ó–∞–ø–æ–ª–Ω–∏—Ç—å –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–ø–∏—Å–∞–Ω–∏—è'],
            ['–ë–æ–ª–∏ –∏ –ø—Ä–æ–±–ª–µ–º—ã –¶–ê', '–ó–∞–ø–æ–ª–Ω–∏—Ç—å –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–ø–∏—Å–∞–Ω–∏—è'],
            ['–ü–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏ –∏ –∂–µ–ª–∞–Ω–∏—è', '–ó–∞–ø–æ–ª–Ω–∏—Ç—å –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è'],
            ['–ö–∞–Ω–∞–ª—ã –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏', '–ó–∞–ø–æ–ª–Ω–∏—Ç—å –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è'],
            ['–°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏', '–ó–∞–ø–æ–ª–Ω–∏—Ç—å –ø–æ—Å–ª–µ –∞–Ω–∞–ª–∏–∑–∞']
        ]
    
    def handle_incoming_webhook(self, webhook_data):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–µ–≥–æ webhook –æ—Ç N8N —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å–æ–∑–¥–∞–Ω–Ω–æ–π —Ç–∞–±–ª–∏—Ü–µ"""
        try:
            request_id = webhook_data.get('request_id')
            if not request_id:
                logger.error('–ü–æ–ª—É—á–µ–Ω webhook –±–µ–∑ request_id')
                return False
            
            if request_id not in self.pending_requests:
                logger.warning(f'–ü–æ–ª—É—á–µ–Ω webhook –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ request_id: {request_id}')
                return False
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∞–±–ª–∏—Ü–µ
            spreadsheet_info = {
                'request_id': request_id,
                'spreadsheet_id': webhook_data.get('spreadsheet_id'),
                'spreadsheet_url': webhook_data.get('spreadsheet_url'),
                'sheet_title': webhook_data.get('sheet_title'),
                'status': webhook_data.get('status', 'success'),
                'error_message': webhook_data.get('error_message'),
                'created_at': datetime.now()
            }
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–ø—Ä–æ—Å–∞
            self.pending_requests[request_id].update({
                'status': 'completed',
                'spreadsheet_info': spreadsheet_info,
                'completed_at': datetime.now()
            })
            
            logger.info(f'–ü–æ–ª—É—á–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–∞–±–ª–∏—Ü–µ –¥–ª—è request_id: {request_id}')
            logger.info(f'Spreadsheet ID: {spreadsheet_info["spreadsheet_id"]}')
            logger.info(f'Spreadsheet URL: {spreadsheet_info["spreadsheet_url"]}')
            
            return True
            
        except Exception as e:
            logger.error(f'–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Ö–æ–¥—è—â–µ–≥–æ webhook: {e}')
            return False
    
    def get_spreadsheet_info(self, request_id):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–∞–±–ª–∏—Ü–µ –ø–æ request_id"""
        if request_id not in self.pending_requests:
            return None
            
        request_info = self.pending_requests[request_id]
        if request_info['status'] == 'completed':
            return request_info.get('spreadsheet_info')
        
        return None
    
    def is_request_completed(self, request_id):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω –ª–∏ –∑–∞–ø—Ä–æ—Å"""
        if request_id not in self.pending_requests:
            return False
        return self.pending_requests[request_id]['status'] == 'completed'
    
    def cleanup_old_requests(self, hours=24):
        """–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤"""
        cutoff_time = datetime.now() - timedelta(hours=hours)
        
        to_remove = []
        for request_id, request_info in self.pending_requests.items():
            if request_info['timestamp'] < cutoff_time:
                to_remove.append(request_id)
        
        for request_id in to_remove:
            del self.pending_requests[request_id]
            logger.info(f'–£–¥–∞–ª–µ–Ω —Å—Ç–∞—Ä—ã–π –∑–∞–ø—Ä–æ—Å: {request_id}')
    
    def get_pending_requests_count(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ–∂–∏–¥–∞—é—â–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤"""
        return len([r for r in self.pending_requests.values() if r['status'] == 'pending'])
    
    def get_completed_requests_count(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤"""
        return len([r for r in self.pending_requests.values() if r['status'] == 'completed'])


def test_n8n_webhook_service():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ N8N webhook —Å–µ—Ä–≤–∏—Å–∞"""
    print('üîß –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï N8N WEBHOOK SERVICE:')
    print('='*50)
    
    service = N8NWebhookService()
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π webhook URL
    test_webhook_url = input('üìù –í–≤–µ–¥–∏—Ç–µ N8N outgoing webhook URL (–∏–ª–∏ Enter –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞): ').strip()
    
    if not test_webhook_url:
        print('‚ö†Ô∏è Webhook URL –Ω–µ —É–∫–∞–∑–∞–Ω, —Ç–µ—Å—Ç –ø—Ä–æ–ø—É—â–µ–Ω')
        return
    
    service.set_outgoing_webhook(test_webhook_url)
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    test_data = {
        'profession': 'N8N –¢–ï–°–¢ - Digital –º–∞—Ä–∫–µ—Ç–æ–ª–æ–≥',
        'segmentation': '–ü–æ–º–æ–≥–∞—é –±–∏–∑–Ω–µ—Å—É —á–µ—Ä–µ–∑ N8N webhooks',
        'ideal_client': '–í–ª–∞–¥–µ–ª—å—Ü—ã –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω–æ–≤ —Å –¥–≤—É—Å—Ç–æ—Ä–æ–Ω–Ω–µ–π —Å–≤—è–∑—å—é'
    }
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    import asyncio
    
    async def test_send():
        request_id = await service.send_data_to_n8n(12345, test_data)
        if request_id:
            print(f'‚úÖ –î–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã, request_id: {request_id}')
            print(f'üìä –û–∂–∏–¥–∞—é—â–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: {service.get_pending_requests_count()}')
            
            # –°–∏–º—É–ª—è—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç N8N
            print('\nüìã –î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ—Å—Ç–∞ —Å–∏–º—É–ª–∏—Ä—É–π—Ç–µ –≤—Ö–æ–¥—è—â–∏–π webhook:')
            print(f'{{')
            print(f'  "request_id": "{request_id}",')
            print(f'  "spreadsheet_id": "1ABC123DEF456",')
            print(f'  "spreadsheet_url": "https://docs.google.com/spreadsheets/d/1ABC123DEF456/edit",')
            print(f'  "sheet_title": "–¢–µ—Å—Ç–æ–≤–∞—è —Ç–∞–±–ª–∏—Ü–∞",')
            print(f'  "status": "success"')
            print(f'}}')
        else:
            print('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ')
    
    asyncio.run(test_send())


if __name__ == '__main__':
    test_n8n_webhook_service()
