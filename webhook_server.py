"""Flask —Å–µ—Ä–≤–µ—Ä –¥–ª—è –ø—Ä–∏–µ–º–∞ –≤—Ö–æ–¥—è—â–∏—Ö webhook'–æ–≤"""
from flask import Flask, request, jsonify
import logging
import asyncio
import threading
from typing import Optional

logger = logging.getLogger(__name__)

class WebhookServer:
    def __init__(self, bot_instance, host='0.0.0.0', port=8080):
        self.bot = bot_instance
        self.app = Flask(__name__)
        self.host = host
        self.port = port
        self.setup_routes()
        
    def setup_routes(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–∞—Ä—à—Ä—É—Ç–æ–≤ –¥–ª—è webhook'–æ–≤"""
        
        @self.app.route('/webhook/n8n/spreadsheet', methods=['POST'])
        def handle_n8n_spreadsheet():
            """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–∏–π webhook –æ—Ç N8N —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ç–∞–±–ª–∏—Ü–µ"""
            try:
                data = request.get_json()
                if not data:
                    return jsonify({'error': 'No JSON data provided'}), 400
                
                logger.info(f"üì® –ü–æ–ª—É—á–µ–Ω N8N webhook: {data}")
                
                # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –≤ asyncio
                loop = asyncio.new_event_loop()
                asyncio.set_event_loop(loop)
                
                success = loop.run_until_complete(self.bot.handle_n8n_webhook(data))
                loop.close()
                
                if success:
                    return jsonify({'status': 'success', 'message': 'N8N webhook processed'}), 200
                else:
                    return jsonify({'status': 'error', 'message': 'Failed to process N8N webhook'}), 500
                    
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ N8N webhook: {e}")
                return jsonify({'error': str(e)}), 500
        
        @self.app.route('/webhook/system/response', methods=['POST'])
        def handle_system_response():
            """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç—ã –æ—Ç —Å–∏—Å—Ç–µ–º (ready —Å—Ç–∞—Ç—É—Å)"""
            try:
                data = request.get_json()
                if not data:
                    return jsonify({'error': 'No JSON data provided'}), 400
                
                logger.info(f"üì® –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç —Å–∏—Å—Ç–µ–º—ã: {data}")
                
                # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –≤ asyncio
                loop = asyncio.new_event_loop()
                asyncio.set_event_loop(loop)
                
                success = loop.run_until_complete(self.bot.handle_webhook_response(data))
                loop.close()
                
                if success:
                    return jsonify({'status': 'success', 'message': 'System response processed'}), 200
                else:
                    return jsonify({'status': 'error', 'message': 'Failed to process system response'}), 500
                    
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞ —Å–∏—Å—Ç–µ–º—ã: {e}")
                return jsonify({'error': str(e)}), 500
        
        @self.app.route('/health', methods=['GET'])
        def health_check():
            """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–µ—Ä–∞"""
            return jsonify({
                'status': 'healthy',
                'bot_running': True,
                'endpoints': [
                    '/webhook/n8n/spreadsheet',
                    '/webhook/system/response',
                    '/health'
                ]
            }), 200
        
        @self.app.route('/', methods=['GET'])
        def root():
            """–ö–æ—Ä–Ω–µ–≤–æ–π –º–∞—Ä—à—Ä—É—Ç"""
            return jsonify({
                'service': 'Telegram Bot Webhook Server',
                'version': '1.0',
                'endpoints': {
                    'n8n_spreadsheet': '/webhook/n8n/spreadsheet',
                    'system_response': '/webhook/system/response', 
                    'health': '/health'
                }
            }), 200
    
    def start_server(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç Flask —Å–µ—Ä–≤–µ—Ä –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
        def run_server():
            logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ webhook —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ {self.host}:{self.port}")
            self.app.run(
                host=self.host,
                port=self.port,
                debug=False,
                use_reloader=False,
                threaded=True
            )
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        server_thread = threading.Thread(target=run_server, daemon=True)
        server_thread.start()
        logger.info(f"‚úÖ Webhook —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –≤ —Ñ–æ–Ω–æ–≤–æ–º –ø–æ—Ç–æ–∫–µ")
        
        return server_thread


# –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞
def test_webhook_server():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ webhook —Å–µ—Ä–≤–µ—Ä–∞"""
    import requests
    import time
    
    # –°–æ–∑–¥–∞–µ–º –º–æ–∫-–±–æ—Ç–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    class MockBot:
        async def handle_n8n_webhook(self, data):
            print(f"üß™ –¢–µ—Å—Ç N8N webhook: {data}")
            return True
            
        async def handle_webhook_response(self, data):
            print(f"üß™ –¢–µ—Å—Ç system response: {data}")
            return True
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Å–µ—Ä–≤–µ—Ä
    mock_bot = MockBot()
    server = WebhookServer(mock_bot, port=8081)
    server.start_server()
    
    time.sleep(1)  # –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
    
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï WEBHOOK –°–ï–†–í–ï–†–ê:")
    print("=" * 50)
    
    base_url = "http://localhost:8081"
    
    # –¢–µ—Å—Ç health check
    try:
        response = requests.get(f"{base_url}/health")
        print(f"‚úÖ Health check: {response.status_code} - {response.json()}")
    except Exception as e:
        print(f"‚ùå Health check failed: {e}")
    
    # –¢–µ—Å—Ç N8N webhook
    try:
        n8n_data = {
            "request_id": "test_123",
            "status": "success",
            "spreadsheet_id": "TEST_ID",
            "spreadsheet_url": "https://test.com",
            "sheet_title": "Test Sheet"
        }
        response = requests.post(f"{base_url}/webhook/n8n/spreadsheet", json=n8n_data)
        print(f"‚úÖ N8N webhook: {response.status_code} - {response.json()}")
    except Exception as e:
        print(f"‚ùå N8N webhook failed: {e}")
    
    # –¢–µ—Å—Ç system response webhook
    try:
        system_data = {
            "webhook_id": "webhook_1",
            "status": "ready",
            "user_id": "12345"
        }
        response = requests.post(f"{base_url}/webhook/system/response", json=system_data)
        print(f"‚úÖ System response: {response.status_code} - {response.json()}")
    except Exception as e:
        print(f"‚ùå System response failed: {e}")


if __name__ == '__main__':
    test_webhook_server()
    input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è...")
