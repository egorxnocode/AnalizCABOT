"""Telegram –±–æ—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ü–µ–ª–µ–≤–æ–π –∞—É–¥–∏—Ç–æ—Ä–∏–∏"""
import asyncio
import logging
from datetime import datetime
from typing import Dict, Any
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, ContextTypes, filters
from google_minimal_service import GoogleMinimalService
from webhook_service import WebhookService
from n8n_webhook_service import N8NWebhookService
from sequential_webhook_service import SequentialWebhookService
from webhook_server import WebhookServer
import config

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
WAITING_FOR_PROFESSION = 1
WAITING_FOR_SEGMENTATION = 2
WAITING_FOR_IDEAL_CLIENT = 3

class TargetAudienceBot:
    def __init__(self):
        self.google_service = GoogleMinimalService()
        self.webhook_service = WebhookService()
        self.n8n_service = N8NWebhookService()
        self.sequential_webhook_service = SequentialWebhookService()
        self.application = None  # –ë—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–∑–∂–µ –≤ main()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ N8N webhook –µ—Å–ª–∏ URL –µ—Å—Ç—å –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        if hasattr(config, 'N8N_OUTGOING_WEBHOOK_URL') and config.N8N_OUTGOING_WEBHOOK_URL:
            self.n8n_service.set_outgoing_webhook(config.N8N_OUTGOING_WEBHOOK_URL)
        
        self.user_sessions = {}  # –•—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º webhook —Å–µ—Ä–≤–µ—Ä
        self.webhook_server = WebhookServer(self, host='0.0.0.0', port=config.WEBHOOK_PORT)
        self.webhook_server.start_server()

    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        user_id = update.effective_user.id
        
        # –°–±—Ä–æ—Å —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        self.user_sessions[user_id] = {}
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ "–ù–∞—á–∞—Ç—å –∞–Ω–∞–ª–∏–∑ –¶–ê"
        keyboard = [[InlineKeyboardButton("üéØ –ù–∞—á–∞—Ç—å –∞–Ω–∞–ª–∏–∑ –¶–ê", callback_data='start_analysis')]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            config.WELCOME_MESSAGE,
            reply_markup=reply_markup
        )

    async def button_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
        query = update.callback_query
        await query.answer()
        
        user_id = query.from_user.id
        
        if query.data == 'start_analysis':
            # –ù–∞—á–∞–ª–æ –∞–Ω–∞–ª–∏–∑–∞ - –∑–∞–ø—Ä–æ—Å –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏
            self.user_sessions[user_id] = {'state': WAITING_FOR_PROFESSION}
            
            await query.edit_message_text(
                f"üìù {config.QUESTIONS['profession']}"
            )

    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        user_id = update.effective_user.id
        user_text = update.message.text
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è
        if user_id not in self.user_sessions:
            await update.message.reply_text(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /start"
            )
            return
        
        session = self.user_sessions[user_id]
        state = session.get('state')
        
        if state == WAITING_FOR_PROFESSION:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ—Ñ–µ—Å—Å–∏—é –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
            session['profession'] = user_text
            session['state'] = WAITING_FOR_SEGMENTATION
            
            await update.message.reply_text(
                f"‚úÖ –ü—Ä–æ—Ñ–µ—Å—Å–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {user_text}\n\n"
                f"üìù {config.QUESTIONS['segmentation']}"
            )
            
        elif state == WAITING_FOR_SEGMENTATION:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—é –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
            session['segmentation'] = user_text
            session['state'] = WAITING_FOR_IDEAL_CLIENT
            
            await update.message.reply_text(
                f"‚úÖ –°–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!\n\n"
                f"üìù {config.QUESTIONS['ideal_client']}"
            )
            
        elif state == WAITING_FOR_IDEAL_CLIENT:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ –∏ —Å–æ–∑–¥–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç
            session['ideal_client'] = user_text
            
            await update.message.reply_text(
                "‚úÖ –ü–æ—Ä—Ç—Ä–µ—Ç –∏–¥–µ–∞–ª—å–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!\n\n"
                "üìä –°–æ–∑–¥–∞—é Google-—Ç–∞–±–ª–∏—Ü—É —Å –∞–Ω–∞–ª–∏–∑–æ–º –¶–ê... –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ."
            )
            
            # –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ N8N –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã
            await update.message.reply_text("üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é –¥–∞–Ω–Ω—ã–µ –≤ N8N –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã...")
            
            try:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ N8N
                request_id = await self.n8n_service.send_data_to_n8n(user_id, {
                    'profession': session['profession'],
                    'segmentation': session['segmentation'],
                    'ideal_client': session['ideal_client']
                })
                
                # –ù–æ–≤–∞—è –ª–æ–≥–∏–∫–∞: —Å–Ω–∞—á–∞–ª–∞ –∂–¥–µ–º –æ—Ç–≤–µ—Ç–∞ –æ—Ç N8N, –ø–æ—Ç–æ–º –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º webhook'–∏ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ
                # –ü–æ–∫–∞ —Ç–æ–ª—å–∫–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ N8N –∏ –∂–¥–µ–º –æ—Ç–≤–µ—Ç–∞
                webhook_status = ""
                
                if request_id:
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º request_id –∏ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–µ—Å—Å–∏–∏
                    session['n8n_request_id'] = request_id
                    session['user_data'] = {
                        'profession': session['profession'],
                        'segmentation': session['segmentation'],
                        'ideal_client': session['ideal_client']
                    }
                    
                    await update.message.reply_text(
                        f"üìä –ü—Ä–æ—Ü–µ—Å—Å –∑–∞–ø—É—â–µ–Ω:\n"
                        f"‚úÖ –î–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ N8N\n"
                        f"üìù ID –∑–∞–ø—Ä–æ—Å–∞: {request_id}\n\n"
                        f"‚è≥ –û–∂–∏–¥–∞—é —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã –≤ N8N...\n"
                        f"üìã –ü–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã –Ω–∞—á–Ω—É –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É –≤ 9 —Å–∏—Å—Ç–µ–º"
                    )
                    
                    # –ù–ï –æ—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é - –∂–¥–µ–º –æ—Ç–≤–µ—Ç–∞ –æ—Ç N8N
                    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è N8N (5 –º–∏–Ω—É—Ç)
                    asyncio.create_task(self._n8n_timeout_handler(user_id, request_id))
                else:
                    # N8N –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º webhook'–∏ –±–µ–∑ —Ç–∞–±–ª–∏—Ü—ã
                    await update.message.reply_text(
                        f"‚ö†Ô∏è N8N –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - —Ç–∞–±–ª–∏—Ü–∞ –Ω–µ —Å–æ–∑–¥–∞–Ω–∞\n"
                        f"üöÄ –ü—Ä–æ–¥–æ–ª–∂–∞—é –æ—Ç–ø—Ä–∞–≤–∫—É –¥–∞–Ω–Ω—ã—Ö –≤ 9 —Å–∏—Å—Ç–µ–º –±–µ–∑ —Ç–∞–±–ª–∏—Ü—ã..."
                    )
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ —Å–∏—Å—Ç–µ–º—ã –±–µ–∑ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–∞–±–ª–∏—Ü–µ
                    await self._start_sequential_webhooks_without_table(user_id, session)
                    
                    await update.message.reply_text(
                        f"üìä –ü—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–µ–Ω:\n"
                        f"‚ùå –¢–∞–±–ª–∏—Ü–∞: –ù–µ —Å–æ–∑–¥–∞–Ω–∞ (N8N –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω)\n"
                        f"‚úÖ –î–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤–æ –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã\n\n"
                        f"üí° –ê–Ω–∞–ª–∏–∑ –¶–ê –∑–∞–≤–µ—Ä—à–µ–Ω –±–µ–∑ —Ç–∞–±–ª–∏—Ü—ã"
                    )
                    
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ N8N: {e}")
                await update.message.reply_text(
                    f"‚ùå –û—à–∏–±–∫–∞ N8N —Å–µ—Ä–≤–∏—Å–∞: {str(e)}\n"
                    f"üöÄ –ü—Ä–æ–¥–æ–ª–∂–∞—é –æ—Ç–ø—Ä–∞–≤–∫—É –≤ —Å–∏—Å—Ç–µ–º—ã –±–µ–∑ —Ç–∞–±–ª–∏—Ü—ã..."
                )
                
                # –ü—Ä–∏ –æ—à–∏–±–∫–µ N8N —Ç–æ–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º webhook'–∏
                await self._start_sequential_webhooks_without_table(user_id, session)
                
                await update.message.reply_text(
                    f"üìä –ü—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–µ–Ω:\n"
                    f"‚ùå –¢–∞–±–ª–∏—Ü–∞: –û—à–∏–±–∫–∞ N8N\n"
                    f"‚úÖ –î–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤–æ –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã\n\n"
                    f"üí° –ê–Ω–∞–ª–∏–∑ –¶–ê –∑–∞–≤–µ—Ä—à–µ–Ω –±–µ–∑ —Ç–∞–±–ª–∏—Ü—ã"
                )
            
            # –û—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –ù–ï N8N –∑–∞–ø—Ä–æ—Å
            if 'n8n_request_id' not in session:
                del self.user_sessions[user_id]
        
        else:
            await update.message.reply_text(
                "–Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è –Ω–∞—á–∞–ª–∞."
            )
    
    def _format_text_analysis(self, session):
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞ –¶–ê –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º –≤–∏–¥–µ"""
        current_date = datetime.now().strftime("%d.%m.%Y")
        
        return f"""üéØ **–ê–ù–ê–õ–ò–ó –¶–ï–õ–ï–í–û–ô –ê–£–î–ò–¢–û–†–ò–ò**
üìÖ –î–∞—Ç–∞: {current_date}

**–ü—Ä–æ—Ñ–µ—Å—Å–∏—è —ç–∫—Å–ø–µ—Ä—Ç–∞:**
{session['profession']}

**–°–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è —ç–∫—Å–ø–µ—Ä—Ç–∞:**
{session['segmentation']}

**–ü–æ—Ä—Ç—Ä–µ—Ç –∏–¥–µ–∞–ª—å–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞:**
{session['ideal_client']}

---

üìã **–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –î–õ–Ø –î–ê–õ–¨–ù–ï–ô–®–ï–ô –†–ê–ë–û–¢–´:**

‚Ä¢ –û–ø—Ä–µ–¥–µ–ª–∏—Ç–µ –æ—Å–Ω–æ–≤–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –¶–ê –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–ø–∏—Å–∞–Ω–∏—è
‚Ä¢ –í—ã—è–≤–∏—Ç–µ –±–æ–ª–∏ –∏ –ø—Ä–æ–±–ª–µ–º—ã —Ü–µ–ª–µ–≤–æ–π –∞—É–¥–∏—Ç–æ—Ä–∏–∏  
‚Ä¢ –°—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π—Ç–µ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏ –∏ –∂–µ–ª–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤
‚Ä¢ –ò—Å—Å–ª–µ–¥—É–π—Ç–µ –∫–∞–Ω–∞–ª—ã –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏ —Å –¶–ê
‚Ä¢ –†–∞–∑—Ä–∞–±–æ—Ç–∞–π—Ç–µ –ø–ª–∞–Ω —Å–ª–µ–¥—É—é—â–∏—Ö —à–∞–≥–æ–≤

‚úÖ –ê–Ω–∞–ª–∏–∑ –≥–æ—Ç–æ–≤ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è!"""

    async def handle_n8n_webhook(self, webhook_data):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–µ–≥–æ webhook –æ—Ç N8N —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å–æ–∑–¥–∞–Ω–Ω–æ–π —Ç–∞–±–ª–∏—Ü–µ"""
        try:
            # –ü–µ—Ä–µ–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ N8N —Å–µ—Ä–≤–∏—Å
            success = self.n8n_service.handle_incoming_webhook(webhook_data)
            
            if not success:
                logger.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook –æ—Ç N8N')
                return False
            
            request_id = webhook_data.get('request_id')
            if not request_id:
                logger.error('Webhook –±–µ–∑ request_id')
                return False
            
            # –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ request_id
            user_id = None
            for uid, session in self.user_sessions.items():
                if session.get('n8n_request_id') == request_id:
                    user_id = uid
                    break
            
            if not user_id:
                logger.warning(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è request_id: {request_id}')
                return False
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∞–±–ª–∏—Ü–µ
            spreadsheet_info = self.n8n_service.get_spreadsheet_info(request_id)
            
            if not spreadsheet_info:
                logger.error(f'–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–∞–±–ª–∏—Ü–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è request_id: {request_id}')
                return False
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –≥–æ—Ç–æ–≤–æ–π —Ç–∞–±–ª–∏—Ü–µ –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ webhook'–∏  
            await self._start_sequential_webhooks(user_id, spreadsheet_info)
            
            return True
            
        except Exception as e:
            logger.error(f'–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ N8N webhook: {e}')
            return False
    
    async def _notify_user_about_spreadsheet(self, user_id, spreadsheet_info):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –≥–æ—Ç–æ–≤–æ–π —Ç–∞–±–ª–∏—Ü–µ"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ application –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ
            if not self.application:
                logger.error(f'Application –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}')
                return
                
            if spreadsheet_info['status'] == 'success':
                # –£—Å–ø–µ—à–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
                spreadsheet_id = spreadsheet_info['spreadsheet_id']
                spreadsheet_url = spreadsheet_info['spreadsheet_url']
                sheet_title = spreadsheet_info['sheet_title']
                
                # –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —Ç–∞–±–ª–∏—Ü–µ
                keyboard = [[InlineKeyboardButton("üìä –û—Ç–∫—Ä—ã—Ç—å —Ç–∞–±–ª–∏—Ü—É", url=spreadsheet_url)]]
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                await self.application.bot.send_message(
                    chat_id=user_id,
                    text=f"üéâ –¢–∞–±–ª–∏—Ü–∞ –≥–æ—Ç–æ–≤–∞!\n\n"
                         f"üìã –ù–∞–∑–≤–∞–Ω–∏–µ: {sheet_title}\n"
                         f"üîó –°—Å—ã–ª–∫–∞: {spreadsheet_url}\n"
                         f"üìä ID: {spreadsheet_id}\n\n"
                         f"–¢–∞–±–ª–∏—Ü–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –∞–Ω–∞–ª–∏–∑ –≤–∞—à–µ–π —Ü–µ–ª–µ–≤–æ–π –∞—É–¥–∏—Ç–æ—Ä–∏–∏.",
                    reply_markup=reply_markup
                )
                
                # –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑
                await self.application.bot.send_message(
                    chat_id=user_id,
                    text="–•–æ—Ç–∏—Ç–µ –ø—Ä–æ–≤–µ—Å—Ç–∏ –µ—â–µ –æ–¥–∏–Ω –∞–Ω–∞–ª–∏–∑? –ù–∞–ø–∏—à–∏—Ç–µ /start"
                )
                
            else:
                # –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã
                error_message = spreadsheet_info.get('error_message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
                
                await self.application.bot.send_message(
                    chat_id=user_id,
                    text=f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã –≤ N8N:\n{error_message}\n\n"
                         f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ–∑–¥–∞—Ç—å –∞–Ω–∞–ª–∏–∑ –∑–∞–Ω–æ–≤–æ."
                )
                
        except Exception as e:
            logger.error(f'–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}')

    async def _start_sequential_webhooks(self, user_id: int, spreadsheet_info: Dict[str, Any]):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É webhook'–æ–≤ –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã –æ—Ç N8N"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ application –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ
            if not self.application:
                logger.error(f'Application –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}')
                return
                
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–µ—Å—Å–∏–∏
            if user_id not in self.user_sessions:
                logger.error(f'–°–µ—Å—Å–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞')
                return
                
            session = self.user_sessions[user_id]
            user_data = session.get('user_data', {})
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –≥–æ—Ç–æ–≤–æ–π —Ç–∞–±–ª–∏—Ü–µ
            spreadsheet_url = spreadsheet_info['spreadsheet_url']
            sheet_title = spreadsheet_info['sheet_title']
            
            keyboard = [[InlineKeyboardButton("üìä –û—Ç–∫—Ä—ã—Ç—å —Ç–∞–±–ª–∏—Ü—É", url=spreadsheet_url)]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await self.application.bot.send_message(
                chat_id=user_id,
                text=f"üéâ –¢–∞–±–ª–∏—Ü–∞ —Å–æ–∑–¥–∞–Ω–∞!\n\n"
                     f"üìã –ù–∞–∑–≤–∞–Ω–∏–µ: {sheet_title}\n"
                     f"üîó –°—Å—ã–ª–∫–∞: {spreadsheet_url}\n\n"
                     f"üöÄ –¢–µ–ø–µ—Ä—å –Ω–∞—á–∏–Ω–∞—é –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É –≤ 9 —Å–∏—Å—Ç–µ–º...",
                reply_markup=reply_markup
            )
            
            # –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ
            async def progress_callback(message: str):
                await self.application.bot.send_message(
                    chat_id=user_id,
                    text=message
                )
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É webhook'–æ–≤
            webhook_results = await self.sequential_webhook_service.send_webhooks_sequentially(
                user_id=user_id,
                user_data=user_data,
                spreadsheet_info=spreadsheet_info,
                progress_callback=progress_callback
            )
            
            # –ü–æ–¥–≤–æ–¥–∏–º –∏—Ç–æ–≥–∏
            successful = sum(1 for success in webhook_results.values() if success)
            total = len(webhook_results)
            
            await self.application.bot.send_message(
                chat_id=user_id,
                text=f"üèÅ –ü—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–µ–Ω!\n\n"
                     f"üìä –¢–∞–±–ª–∏—Ü–∞: {sheet_title}\n"
                     f"üîó –°—Å—ã–ª–∫–∞: {spreadsheet_url}\n"
                     f"üì° –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–∏—Å—Ç–µ–º: {successful}/{total}\n\n"
                     f"‚úÖ –ê–Ω–∞–ª–∏–∑ —Ü–µ–ª–µ–≤–æ–π –∞—É–¥–∏—Ç–æ—Ä–∏–∏ –≥–æ—Ç–æ–≤!"
            )
            
            # –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑
            await self.application.bot.send_message(
                chat_id=user_id,
                text="–•–æ—Ç–∏—Ç–µ –ø—Ä–æ–≤–µ—Å—Ç–∏ –µ—â–µ –æ–¥–∏–Ω –∞–Ω–∞–ª–∏–∑? –ù–∞–ø–∏—à–∏—Ç–µ /start"
            )
            
            # –û—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if user_id in self.user_sessions:
                del self.user_sessions[user_id]
                
        except Exception as e:
            logger.error(f'–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö webhook\'–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}')
            await self.application.bot.send_message(
                chat_id=user_id,
                text=f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–∏—Å—Ç–µ–º: {str(e)}\n\n"
                     f"–¢–∞–±–ª–∏—Ü–∞ —Å–æ–∑–¥–∞–Ω–∞, –Ω–æ –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —Å–∏—Å—Ç–µ–º—ã –º–æ–≥–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ."
            )

    async def _start_sequential_webhooks_without_table(self, user_id: int, session: Dict[str, Any]):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É webhook'–æ–≤ –ë–ï–ó –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–∞–±–ª–∏—Ü–µ"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ application –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ
            if not self.application:
                logger.error(f'Application –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}')
                return
                
            user_data = {
                'profession': session['profession'],
                'segmentation': session['segmentation'],
                'ideal_client': session['ideal_client']
            }
            
            # –°–æ–∑–¥–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∞–±–ª–∏—Ü–µ
            fake_spreadsheet_info = {
                'spreadsheet_id': 'not_available',
                'spreadsheet_url': 'https://docs.google.com/spreadsheets/d/not_available',
                'sheet_title': '–¢–∞–±–ª–∏—Ü–∞ –Ω–µ —Å–æ–∑–¥–∞–Ω–∞',
                'created_at': datetime.now().isoformat()
            }
            
            await self.application.bot.send_message(
                chat_id=user_id,
                text=f"üöÄ –ù–∞—á–∏–Ω–∞—é –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É –≤ 9 —Å–∏—Å—Ç–µ–º...\n"
                     f"üìù –î–∞–Ω–Ω—ã–µ: –ø—Ä–æ—Ñ–µ—Å—Å–∏—è, —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è, –ø–æ—Ä—Ç—Ä–µ—Ç –∫–ª–∏–µ–Ω—Ç–∞\n"
                     f"‚ö†Ô∏è –¢–∞–±–ª–∏—Ü–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –Ω–æ –¥–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è"
            )
            
            # –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ
            async def progress_callback(message: str):
                await self.application.bot.send_message(
                    chat_id=user_id,
                    text=message
                )
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É webhook'–æ–≤
            webhook_results = await self.sequential_webhook_service.send_webhooks_sequentially(
                user_id=user_id,
                user_data=user_data,
                spreadsheet_info=fake_spreadsheet_info,
                progress_callback=progress_callback
            )
            
            # –ü–æ–¥–≤–æ–¥–∏–º –∏—Ç–æ–≥–∏
            successful = sum(1 for success in webhook_results.values() if success)
            total = len(webhook_results)
            
            await self.application.bot.send_message(
                chat_id=user_id,
                text=f"üèÅ –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ —Å–∏—Å—Ç–µ–º—ã –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
                     f"‚ùå –¢–∞–±–ª–∏—Ü–∞: –ù–µ —Å–æ–∑–¥–∞–Ω–∞\n"
                     f"üì° –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–∏—Å—Ç–µ–º: {successful}/{total}\n\n"
                     f"‚úÖ –î–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤–æ –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã!"
            )
            
            # –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑
            await self.application.bot.send_message(
                chat_id=user_id,
                text="–•–æ—Ç–∏—Ç–µ –ø—Ä–æ–≤–µ—Å—Ç–∏ –µ—â–µ –æ–¥–∏–Ω –∞–Ω–∞–ª–∏–∑? –ù–∞–ø–∏—à–∏—Ç–µ /start"
            )
            
            # –û—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if user_id in self.user_sessions:
                del self.user_sessions[user_id]
                
        except Exception as e:
            logger.error(f'–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ webhook\'–æ–≤ –±–µ–∑ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}')
            await self.application.bot.send_message(
                chat_id=user_id,
                text=f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ —Å–∏—Å—Ç–µ–º—ã: {str(e)}\n\n"
                     f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ–∑–¥–∞—Ç—å –∞–Ω–∞–ª–∏–∑ –∑–∞–Ω–æ–≤–æ."
            )

    async def _n8n_timeout_handler(self, user_id: int, request_id: str):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–∞–π–º–∞—É—Ç–∞ –¥–ª—è N8N - –µ—Å–ª–∏ —Ç–∞–±–ª–∏—Ü–∞ –Ω–µ —Å–æ–∑–¥–∞–µ—Ç—Å—è –∑–∞ 5 –º–∏–Ω—É—Ç"""
        try:
            # –ñ–¥–µ–º 5 –º–∏–Ω—É—Ç (300 —Å–µ–∫—É–Ω–¥)
            await asyncio.sleep(300)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –µ—â–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Å–µ—Å—Å–∏–∏ —Å —ç—Ç–∏–º request_id
            if user_id in self.user_sessions:
                session = self.user_sessions[user_id]
                if session.get('n8n_request_id') == request_id:
                    logger.warning(f'–¢–∞–π–º–∞—É—Ç N8N –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}, request_id: {request_id}')
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ application –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ
                    if not self.application:
                        logger.error(f'Application –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –≤ —Ç–∞–π–º–∞—É—Ç–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}')
                        return
                    
                    await self.application.bot.send_message(
                        chat_id=user_id,
                        text=f"‚è∞ –¢–∞–π–º–∞—É—Ç N8N (5 –º–∏–Ω—É—Ç –∏—Å—Ç–µ–∫–ª–æ)\n"
                             f"üöÄ –ü—Ä–æ–¥–æ–ª–∂–∞—é –±–µ–∑ —Ç–∞–±–ª–∏—Ü—ã - –æ—Ç–ø—Ä–∞–≤–ª—è—é –≤ 9 —Å–∏—Å—Ç–µ–º..."
                    )
                    
                    # –ó–∞–ø—É—Å–∫–∞–µ–º webhook'–∏ –±–µ–∑ —Ç–∞–±–ª–∏—Ü—ã
                    await self._start_sequential_webhooks_without_table(user_id, session)
                    
        except Exception as e:
            logger.error(f'–û—à–∏–±–∫–∞ –≤ —Ç–∞–π–º–∞—É—Ç–µ N8N –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}')

    async def handle_webhook_response(self, response_data: Dict[str, Any]):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç—ã –æ—Ç webhook'–æ–≤ (ready —Å—Ç–∞—Ç—É—Å)"""
        try:
            return self.sequential_webhook_service.handle_webhook_response(response_data)
        except Exception as e:
            logger.error(f'–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞ webhook: {e}')
            return False

    async def error_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
        logger.error(f"Update {update} caused error {context.error}")

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    if not config.TELEGRAM_BOT_TOKEN:
        print("‚ùå –û—à–∏–±–∫–∞: TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
        print("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env –∏ –¥–æ–±–∞–≤—å—Ç–µ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞.")
        return
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –±–æ—Ç–∞
    bot = TargetAudienceBot()
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    application = Application.builder().token(config.TELEGRAM_BOT_TOKEN).build()
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º application –≤ –±–æ—Ç–∞ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ bot API
    bot.application = application
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    application.add_handler(CommandHandler("start", bot.start))
    application.add_handler(CallbackQueryHandler(bot.button_callback))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, bot.handle_message))
    application.add_error_handler(bot.error_handler)
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏.")
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == '__main__':
    main()
