"""–°–µ—Ä–≤–∏—Å –¥–ª—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ webhook'–æ–≤ —Å –æ–∂–∏–¥–∞–Ω–∏–µ–º –æ—Ç–≤–µ—Ç–æ–≤"""
import asyncio
import aiohttp
import ssl
import logging
from datetime import datetime
from typing import Dict, Any, List, Optional
import config

logger = logging.getLogger(__name__)

class SequentialWebhookService:
    def __init__(self):
        self.webhooks = {k: v for k, v in config.WEBHOOKS.items() if v}  # –¢–æ–ª—å–∫–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ URL
        self.timeout = aiohttp.ClientTimeout(total=30)  # 30 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞
        
        # SSL –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å –æ—Ç–∫–ª—é—á–µ–Ω–Ω–æ–π –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–µ–π
        self.ssl_context = ssl.create_default_context()
        self.ssl_context.check_hostname = False
        self.ssl_context.verify_mode = ssl.CERT_NONE
        
        # –•—Ä–∞–Ω–∏–ª–∏—â–µ –æ–∂–∏–¥–∞—é—â–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤ –æ—Ç webhook'–æ–≤
        self.pending_webhooks = {}  # {user_id: {webhook_responses: {}, total_count: int, completed_count: int}}
        
    async def send_webhooks_sequentially(self, user_id: int, user_data: Dict[str, Any], 
                                       spreadsheet_info: Dict[str, Any], 
                                       progress_callback) -> Dict[str, bool]:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç webhook'–∏ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ —Å –æ–∂–∏–¥–∞–Ω–∏–µ–º –æ—Ç–≤–µ—Ç–∞ –æ—Ç –∫–∞–∂–¥–æ–≥–æ
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_data: –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            spreadsheet_info: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–∞–±–ª–∏—Ü–µ –æ—Ç N8N
            progress_callback: –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ
            
        Returns:
            Dict —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏
        """
        if not self.webhooks:
            logger.warning("–ù–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö –≤–µ–±—Ö—É–∫–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏")
            return {}
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        self.pending_webhooks[user_id] = {
            'webhook_responses': {},
            'total_count': len(self.webhooks),
            'completed_count': 0,
            'spreadsheet_info': spreadsheet_info
        }
        
        results = {}
        webhook_list = list(self.webhooks.items())
        
        await progress_callback(f"üöÄ –ù–∞—á–∏–Ω–∞—é –æ—Ç–ø—Ä–∞–≤–∫—É –≤ {len(webhook_list)} —Å–∏—Å—Ç–µ–º...")
        
        for i, (webhook_name, webhook_url) in enumerate(webhook_list, 1):
            await progress_callback(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é –≤ —Å–∏—Å—Ç–µ–º—É {i}/{len(webhook_list)} ({webhook_name})...\n‚è∞ –ñ–¥—É –æ—Ç–≤–µ—Ç–∞ –¥–æ 3 –º–∏–Ω—É—Ç")
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ç–∞–±–ª–∏—Ü–µ
            payload = self._prepare_payload_with_spreadsheet(user_data, spreadsheet_info, webhook_name, user_id)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º webhook
            success = await self._send_webhook_and_wait(webhook_name, webhook_url, payload, user_id)
            results[webhook_name] = success
            
            if success:
                await progress_callback(f"‚úÖ –°–∏—Å—Ç–µ–º–∞ {i}/{len(webhook_list)} –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            else:
                await progress_callback(f"‚ùå –°–∏—Å—Ç–µ–º–∞ {i}/{len(webhook_list)} –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª–∞ –∑–∞ 3 –º–∏–Ω—É—Ç—ã")
                await progress_callback(f"üîÑ –û–¢–õ–ê–î–ö–ê: –ü—Ä–æ–¥–æ–ª–∂–∞—é –æ—Ç–ø—Ä–∞–≤–∫—É –≤ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
                
                # –í–†–ï–ú–ï–ù–ù–û: –ù–ï –ø—Ä–µ–∫—Ä–∞—â–∞–µ–º —Ü–∏–∫–ª –ø—Ä–∏ –Ω–µ—É–¥–∞—á–µ - –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                # break  # –ó–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                
            # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏
            await asyncio.sleep(0.5)
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user_id in self.pending_webhooks:
            del self.pending_webhooks[user_id]
            
        successful = sum(1 for success in results.values() if success)
        logger.info(f"–ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {successful}/{len(results)} –≤–µ–±—Ö—É–∫–æ–≤")
        
        return results
    
    def _prepare_payload_with_spreadsheet(self, user_data: Dict[str, Any], 
                                        spreadsheet_info: Dict[str, Any],
                                        webhook_name: str, user_id: int) -> Dict[str, Any]:
        """–ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ç–∞–±–ª–∏—Ü–µ"""
        
        # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏–π –≤ JSON-—Å–µ—Ä–∏–∞–ª–∏–∑—É–µ–º—ã–µ
        def safe_json_value(value):
            if hasattr(value, 'isoformat'):  # datetime –æ–±—ä–µ–∫—Ç
                return value.isoformat()
            elif not isinstance(value, (str, int, float, bool, type(None))):
                return str(value)
            return value
        
        # –ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø–æ–ª—É—á–∞–µ–º –∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è
        spreadsheet_id = safe_json_value(spreadsheet_info.get('spreadsheet_id', ''))
        spreadsheet_url = safe_json_value(spreadsheet_info.get('spreadsheet_url', ''))
        sheet_title = safe_json_value(spreadsheet_info.get('sheet_title', ''))
        created_at = safe_json_value(spreadsheet_info.get('created_at', ''))
        
        return {
            "event_type": "target_audience_analysis",
            "timestamp": datetime.now().isoformat(),
            "user_id": str(user_id),
            "webhook_name": webhook_name,
            "telegram_user_id": user_id,  # –î—É–±–ª–∏—Ä—É–µ–º –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞
            "user_data": {
                "profession": user_data.get('profession', ''),
                "segmentation": user_data.get('segmentation', ''),
                "ideal_client_portrait": user_data.get('ideal_client', '')
            },
            "spreadsheet_info": {
                "spreadsheet_id": spreadsheet_id,
                "spreadsheet_url": spreadsheet_url,
                "sheetid": sheet_title,
                "created_at": created_at
            },
            "analysis_data": {
                "analysis_date": datetime.now().strftime("%d.%m.%Y"),
                "characteristics": "–ó–∞–ø–æ–ª–Ω–∏—Ç—å –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–ø–∏—Å–∞–Ω–∏—è",
                "pain_points": "–ó–∞–ø–æ–ª–Ω–∏—Ç—å –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–ø–∏—Å–∞–Ω–∏—è", 
                "needs_and_desires": "–ó–∞–ø–æ–ª–Ω–∏—Ç—å –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–ø–∏—Å–∞–Ω–∏—è",
                "communication_channels": "–ó–∞–ø–æ–ª–Ω–∏—Ç—å –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è",
                "recommendations": "–ó–∞–ø–æ–ª–Ω–∏—Ç—å –ø–æ—Å–ª–µ –∞–Ω–∞–ª–∏–∑–∞"
            }
        }
    
    async def _send_webhook_and_wait(self, webhook_name: str, webhook_url: str, 
                                   payload: Dict[str, Any], user_id: int) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç webhook –∏ –∂–¥–µ—Ç –æ—Ç–≤–µ—Ç–∞ 'ready'
        
        Returns:
            True –µ—Å–ª–∏ –ø–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç 'ready', False –∏–Ω–∞—á–µ
        """
        try:
            # –õ–æ–≥–∏—Ä—É–µ–º payload –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ (—Ç–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é)
            logger.info(f"üì§ –û–¢–õ–ê–î–ö–ê: –û—Ç–ø—Ä–∞–≤–∫–∞ webhook {webhook_name} –≤ {webhook_url}")
            logger.info(f"üìã –î–∞–Ω–Ω—ã–µ: user_id={payload.get('user_id')}, event_type={payload.get('event_type')}")
            
            connector = aiohttp.TCPConnector(ssl=self.ssl_context)
            async with aiohttp.ClientSession(timeout=self.timeout, connector=connector) as session:
                async with session.post(
                    webhook_url,
                    json=payload,
                    headers={
                        'Content-Type': 'application/json',
                        'User-Agent': 'TelegramBot-SequentialWebhook/1.0'
                    }
                ) as response:
                    if response.status in [200, 201, 202]:
                        logger.info(f"‚úÖ Webhook {webhook_name} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω (—Å—Ç–∞—Ç—É—Å: {response.status})")
                        
                        # –ñ–¥–µ–º –æ—Ç–≤–µ—Ç–∞ –æ—Ç webhook'–∞ –≤ —Ç–µ—á–µ–Ω–∏–µ —Ç–∞–π–º–∞—É—Ç–∞
                        result = await self._wait_for_webhook_response(webhook_name, user_id)
                        logger.info(f"üì• –û–¢–õ–ê–î–ö–ê: –û—Ç–≤–µ—Ç –æ—Ç {webhook_name}: {'ready' if result else '—Ç–∞–π–º–∞—É—Ç'}")
                        return result
                    else:
                        response_text = await response.text()
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ {webhook_name}: {response.status} - {response_text}")
                        return False
                        
        except asyncio.TimeoutError:
            logger.error(f"‚ùå –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ {webhook_name}")
            return False
        except aiohttp.ClientError as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞ {webhook_name}: {e}")
            return False
        except Exception as e:
            logger.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ {webhook_name}: {e}")
            return False
    
    async def _wait_for_webhook_response(self, webhook_name: str, user_id: int, 
                                       timeout_seconds: int = 180) -> bool:
        """
        –ñ–¥–µ—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç webhook'–∞ –≤ —Ç–µ—á–µ–Ω–∏–µ 3 –º–∏–Ω—É—Ç (180 —Å–µ–∫—É–Ω–¥)
        
        Returns:
            True –µ—Å–ª–∏ –ø–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç 'ready', False –ø—Ä–∏ —Ç–∞–π–º–∞—É—Ç–µ
        """
        start_time = asyncio.get_event_loop().time()
        
        while True:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—É—á–µ–Ω –ª–∏ –æ—Ç–≤–µ—Ç
            if (user_id in self.pending_webhooks and 
                webhook_name in self.pending_webhooks[user_id]['webhook_responses']):
                response = self.pending_webhooks[user_id]['webhook_responses'][webhook_name]
                if response.get('status') == 'ready':
                    logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç 'ready' –æ—Ç {webhook_name}")
                    return True
                else:
                    logger.warning(f"‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç {webhook_name}: {response}")
                    return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–π–º–∞—É—Ç
            elapsed = asyncio.get_event_loop().time() - start_time
            if elapsed > timeout_seconds:
                logger.error(f"‚ùå –¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç {webhook_name}")
                return False
            
            # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
            await asyncio.sleep(0.1)
    
    def handle_webhook_response(self, response_data: Dict[str, Any]) -> bool:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–∏–π –æ—Ç–≤–µ—Ç –æ—Ç webhook'–∞
        
        –û–∂–∏–¥–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç:
        {
            "webhook_id": "webhook_1",
            "status": "ready", 
            "user_id": "8098626207",
            "processed_at": "2024-09-20T17:16:45Z",
            "message": "–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã"
        }
        """
        try:
            webhook_id = response_data.get('webhook_id')
            user_id = int(response_data.get('user_id', 0))
            status = response_data.get('status')
            
            if not webhook_id or not user_id or not status:
                logger.error(f"–ù–µ–ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –æ—Ç–≤–µ—Ç–µ webhook: {response_data}")
                return False
            
            if user_id not in self.pending_webhooks:
                logger.warning(f"–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                return False
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç
            self.pending_webhooks[user_id]['webhook_responses'][webhook_id] = response_data
            
            logger.info(f"üì® –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç {webhook_id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {status}")
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞ webhook: {e}")
            return False
    
    def get_configured_webhooks_count(self) -> int:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö –≤–µ–±—Ö—É–∫–æ–≤"""
        return len(self.webhooks)
    
    def get_webhook_names(self) -> List[str]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –Ω–∞–∑–≤–∞–Ω–∏–π –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö –≤–µ–±—Ö—É–∫–æ–≤"""
        return list(self.webhooks.keys())


# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
async def test_sequential_webhooks():
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö webhook'–æ–≤"""
    service = SequentialWebhookService()
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_data = {
        'profession': '–¢–µ—Å—Ç –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö webhook\'–æ–≤',
        'segmentation': '–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—á–µ—Ä–µ–¥–Ω–æ—Å—Ç–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏',
        'ideal_client': '–°–∏—Å—Ç–µ–º—ã –∫–æ—Ç–æ—Ä—ã–µ –æ—Ç–≤–µ—á–∞—é—Ç ready'
    }
    
    # –¢–µ—Å—Ç–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–∞–±–ª–∏—Ü–µ –æ—Ç N8N
    spreadsheet_info = {
        'spreadsheet_id': 'TEST123456789',
        'spreadsheet_url': 'https://docs.google.com/spreadsheets/d/TEST123456789/edit',
        'sheet_title': '[20.09.2024] ‚Äì –¢–µ—Å—Ç–æ–≤–∞—è —Ç–∞–±–ª–∏—Ü–∞',
        'created_at': datetime.now().isoformat()
    }
    
    async def progress_callback(message):
        print(f"üìä {message}")
    
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–û–°–õ–ï–î–û–í–ê–¢–ï–õ–¨–ù–´–• WEBHOOK'–û–í:")
    print("=" * 50)
    
    results = await service.send_webhooks_sequentially(
        user_id=12345,
        user_data=user_data,
        spreadsheet_info=spreadsheet_info,
        progress_callback=progress_callback
    )
    
    print(f"\nüìà –†–µ–∑—É–ª—å—Ç–∞—Ç—ã: {results}")
    
if __name__ == '__main__':
    asyncio.run(test_sequential_webhooks())
